/**
*	This script update kount_Status and data elements that are a part of the RIS response, custom Order attributes
*
*	@input orderId : String
*	@input newStatus : String
*	@input responseRIS : Object
*
*/
importPackage( dw.order );
importPackage( dw.system );


function execute( args : PipelineDictionary ) : Number {
	var kount = require('~/cartridge/scripts/kount/LibKount'),
		orderID : String = args.orderId,
		order : Order = OrderMgr.getOrder(orderID);
	if (!order) {
		return PIPELET_ERROR;
	}
	
	order.custom["kount_Status"] = args.newStatus;
	
	if (order.custom["kount_Status"] != args.newStatus) {
		kount.writeExecutionError (new Error("KOUNT: UpdateOrder.ds: kount_Status custom field wasn't save"), "Update Orders", "error");
		return PIPELET_ERROR;
	}
	
	var response : Object = args.responseRIS;
	if(!empty(response)){
		try {
			var params : Object = response;
			if(!params.hasOwnProperty('ERRO')){
				var elementList : Array = ['GEOX', 'NETW', 'SCOR', 'VELO', 'VMAX', 'TRAN', 'BROWSER', 'OS', 'IP_ORG', 'CARDS', 'DEVICES', 'COUNTRY', 'EMAILS', 'REASON_CODE' , 'REPLY'];
				for(var i = 0; i < elementList.length; i++){
					var elem : String = elementList[i];
					if (elem == "REPLY") {
						order.custom['kount_'+elem] = params['AUTO'];
						if (order.custom['kount_'+elem] != params['AUTO']) {
							kount.writeExecutionError (new Error("KOUNT: UpdateOrder.ds: kount_" + elem + " custom field wasn't save"), "Update Orders", "error");
							return PIPELET_ERROR;
						}
					} else if(elem in params){
						order.custom['kount_'+elem] = params[elem];
						if (order.custom['kount_'+elem] != params[elem]) {
							kount.writeExecutionError (new Error("KOUNT: UpdateOrder.ds: kount_" + elem + " custom field wasn't save"), "Update Orders", "error");
							return PIPELET_ERROR;
						}
					}
				}
			}
		} catch (err){
			kount.writeExecutionError (err, "Update Orders", "error");
			return PIPELET_ERROR;
		}
	}
	return PIPELET_NEXT;
}