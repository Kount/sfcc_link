/**
*	This file is intended to be the form all necessary parameters for RIS and send to Kount service.
*
*   @input Email : String 
*	@input IP : String
*	@input Order : dw.order.Order
*	@input SessionID : String
* 	@input OrderID : String
* 	@input currentRequest : dw.system.Request
*	@input cardNumber : String
*   @output kountOrderStatus : String
*	@output responseRIS : String
*
*/
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.web );
importPackage( dw.customer );
importPackage( dw.util );
importScript("int_kount:kount/LibKount.ds");

function execute( args : PipelineDictionary ) : Number {

	var kount : Object = new KountObject(),
		request : Request = args.currentRequest,
		email : String = args.Email || Resource.msg('kount.noemail','kount',null),
		IP : String = request.httpRemoteAddress,
		sessID : String = args.SessionID,
		orderID : String = args.OrderID,
		order : Order = args.Order,
		totalPrice = (order.getTotalGrossPrice().getValue()*100).toFixed(),
		customer : Customer = order.getCustomer(),
		profile : Profile = customer.getProfile(),
		billingAddr : OrderAddress = order.getBillingAddress(),
		customerID : String = !empty(profile) ? profile.getCustomerNo() : '',
		customerName : String = !empty(profile) ? profile.getFirstName()+' '+profile.getSecondName()+' '+profile.getLastName() : billingAddr.getFullName(),
		customerEmail : String = !empty(profile) ? profile.getEmail() : email,
		shippingTypeMap : Object = { Foreign : 'SD', Overnight : 'ND', '2-Day Express' : '2D', Ground  : 'ST', Express : '2D', USPS : 'ST', 'Super Saver' : 'ST' },
		payInstrColl : Collection = order.getPaymentInstruments(),
		payInstr : PaymentInstrument = kount.getPayment(payInstrColl),
		creditCard : String = args.cardNumber || payInstr.getCreditCardNumber(),
		paymentTypeMap : Object = { BML: 'BLML', CREDIT_CARD: 'CARD', GIFT_CERTIFICATE: 'GIFT', PayPal: 'PYPL' },
		paymentTokenMap : Object = { BML: '', CREDIT_CARD: creditCard, GIFT_CERTIFICATE: payInstr.getGiftCertificateCode(), PayPal: "paypalPayerID" in payInstr.custom && !empty(payInstr.custom.paypalPayerID) ? payInstr.custom.paypalPayerID : "" },
		paymentType = 'NONE',
		paymentToken = null,
		allProducts : Iterator = order.allProductLineItems.iterator(),
		ProdDescVals : Array = [],
		ProdItemVals : Array = [],
		ProdPriceVals : Array = [],
		ProdQuantVals : Array = [],
		ProdTypeVals : Array = [],
		shippStreet1 : String = '',
		shippStreet2 : String = '',
		shippCountry : String = '',
		shippCity : String = '',
		shippName : String = '',
		shippPostalCode : String = '',
		shippPhoneNumber : String = '',
		shippState : String = '',
		shippType : String ='';
	
	while (allProducts.hasNext()){
		var pli : ProductLineItem = allProducts.next();
		if(pli.getPriceValue() != 0){
			var prodType =  !empty(pli.getCategory()) ? pli.getCategory().getDisplayName() : pli.getProductName(),
				price = (pli.getBasePrice().getValue()*100).toFixed();
			ProdDescVals.push(pli.getLineItemText());
			ProdItemVals.push(pli.getProductID());
			ProdPriceVals.push(price);
			ProdQuantVals.push(pli.getQuantityValue());
			ProdTypeVals.push(prodType);		
		}
	}

	var payMethod = payInstr.getPaymentMethod();
	if(payMethod in paymentTypeMap){
		paymentType = paymentTypeMap[payMethod];
		paymentToken = paymentTokenMap[payMethod];
	}
		
	var shipments : Collection = order.getShipments(),
		iter : Iterator = shipments.iterator();
	while(iter != null && iter.hasNext()){
		var shipment : Shipment = iter.next(),
			shippAddr : OrderAddress = shipment.getShippingAddress();
		
		shippStreet1 = shippAddr.getAddress1();
		shippStreet2 = shippAddr.getAddress2();
		shippCountry = shippAddr.getCountryCode().getValue();
		shippCity = shippAddr.getCity();
		shippName = shippAddr.getFullName();
		shippPostalCode = shippAddr.getPostalCode();
		shippPhoneNumber = shippAddr.getPhone();
		shippState = shippAddr.getStateCode();
		
		var shippMethod = shipment.getShippingMethod().getDisplayName();
		if(shippMethod in shippingTypeMap){
			shippType = shippingTypeMap[shippMethod];
		}
	}	
	
	var RequiredInquiryKeysVal : Object = {
		AUTH : Resource.msg('kount.AUTH','kount',null), // For it need imported certificate to Bussiness Manager
		CURR : Site.getCurrent().getDefaultCurrency(),
		EMAL : customerEmail,
		IPAD : IP,
		MACK : Resource.msg('kount.MACK','kount',null),
		MERC : kount._getMercahntID(),
		MODE : Resource.msg('kount.MODE','kount',null),
		PROD_DESC : ProdDescVals,
		PROD_ITEM : ProdItemVals,
		PROD_PRICE : ProdPriceVals,
		PROD_QUANT : ProdQuantVals,
		PROD_TYPE : ProdTypeVals,
		PTOK : paymentToken,
		PTYP : paymentType, 
		SESS : sessID,
		SITE : kount._getWebsiteID(),
		TOTL : totalPrice,
		VERS : Resource.msg('kount.VERS','kount',null),// Provided by Kount
		// Optional keys	
		AVST : 'X',
		AVSZ : 'X',
		B2A1 : billingAddr.getAddress1(),
		B2A2 : billingAddr.getAddress2(),
		B2CC : billingAddr.getCountryCode().getValue(),
		B2CI : billingAddr.getCity(),
		B2PC : billingAddr.getPostalCode(),
		B2PN : billingAddr.getPhone(),
		B2ST : billingAddr.getStateCode(),
		CASH : totalPrice,
		CVVR : 'X',
		NAME : customerName,
		FRMT : Resource.msg('kount.FRMT','kount',null),
		ORDR : orderID,
		S2A1 : shippStreet1,
		S2A2 : shippStreet2,
		S2CC : shippCountry,
		S2CI : shippCity,
		S2EM : email,
		S2NM : shippName,
		S2PC : shippPostalCode,
		S2PN : shippPhoneNumber,
		S2ST : shippState,
		SHTP : shippType,
		UNIQ : customerID,
		UAGT : request.httpHeaders,
		UDF  : kount.getUDFFields(order)
	};
	
	try {
		var response = kount.PostRISRequest(RequiredInquiryKeysVal);
		if(response !== false){
			args.kountOrderStatus = kount.evaluateRISResponse(response);
			args.responseRIS = response;
		} else {
			args.kountOrderStatus = "APPROVED";
			args.responseRIS = '';
		}
	} catch (err){
		kount.writeExecutionError(err, "PostRiskInqueryService.ds", "error");
		args.kountOrderStatus = "APPROVED";
		args.responseRIS = '';
 	}
    return PIPELET_NEXT;
}
